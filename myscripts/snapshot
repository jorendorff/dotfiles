#!/usr/bin/env python

import sys, os, subprocess

usage = """\
usage: snapshot [overwrite]
   --overwrite, -o       Overwrite the previous version of this patch.
"""

HG = 'hg'
DIR = os.path.join(os.environ['HOME'], 'dev', 'patches')

def hg(*args):
    p = subprocess.Popen([HG] + list(args), stdout=subprocess.PIPE)
    output, errors = p.communicate()
    if errors:  # can't happen
        print >>sys.stderr, errors
        sys.exit(2)
    return output, p.returncode

# determine if we're using MQ
rootdir, rc = hg('root')
rootdir = rootdir.rstrip()
if rc != 0:
    print >>sys.stderr, rootdir
    sys.exit(rc)
mq_status_file = os.path.join(rootdir, '.hg', 'patches', 'status')
using_mq = os.path.exists(mq_status_file) and os.path.getsize(mq_status_file) > 0

# figure out a filename
if using_mq:
    DIE
    name, rc = hg('qtop')
    name = name.strip()
    if rc != 0:
        print >>sys.stderr, name
        sys.exit(rc)
else:
    bookmarks_current_file = os.path.join(rootdir, '.hg', 'bookmarks.current')
    if not os.path.exists(bookmarks_current_file):
        print >>sys.stderr, "You aren't using MQ and you aren't using bookmarks. Don't know how to name the patch."
        sys.exit(1)
    with open(bookmarks_current_file) as f:
        name = f.read()
    if '/' in name:
        name = name[name.rindex('/') + 1:]
    if not name:
        print >> sys.stderr, "Empty bookmarks.current, don't know how to proceed."
        sys.exit(1)

# make sure the filename is unique and ends with .patch
if name.endswith('.patch'):
    name = name[:-6]
for i in range(1, 1000):
    filename = os.path.join(DIR, '%s-v%i.patch' % (name, i))
    if not os.path.exists(filename):  # not atomic here
        break
else:
    print >>sys.stderr, "can't make a unique filename in 1000 tries"
    sys.exit(2)

# process -o
if len(sys.argv) == 1:
    pass
elif len(sys.argv) == 2 and sys.argv[1] in ('--overwrite', '-o'):
    if i == 1:
        print >>sys.stderr, "no patch found to overwrite!"
        sys.exit(2)
    i -= 1
    filename = os.path.join(DIR, '%s-v%i.patch' % (name, i))
else:
    print >>sys.stderr, usage
    sys.exit(1)

# dump patch to file
header, rc = hg('export')
if rc != 0:
    sys.exit(rc)
header, _, _ = header.partition("\n\ndiff")
header += "\n"
if using_mq:
    patch, rc = hg('qdiff')
else:
    patch, rc = hg('diff', '-r', '.^')
if rc != 0:
    sys.exit(rc)
with open(filename, 'w') as f:
    f.write(header + "\n" + patch)

# and review it, why not
os.system('${PAGER-less} ' + filename)

print
print filename
